{"version":3,"file":"react-tree-walker.min.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable no-console */\n\n// Inspired by the awesome work by the Apollo team: 😘\n// https://github.com/apollographql/react-apollo/blob/master/src/getDataFromTree.ts\n//\n// This version has been adapted to be Promise based and support native Preact.\n\nconst defaultOptions = {\n  componentWillUnmount: false,\n}\n\nconst forwardRefSymbol = Symbol.for('react.forward_ref')\n\n// Lifted from https://github.com/sindresorhus/p-reduce\n// Thanks @sindresorhus! 🙏\nconst pReduce = (iterable, reducer, initVal) =>\n  new Promise((resolve, reject) => {\n    const iterator = iterable[Symbol.iterator]()\n    let i = 0\n\n    const next = total => {\n      const el = iterator.next()\n\n      if (el.done) {\n        resolve(total)\n        return\n      }\n\n      Promise.all([total, el.value])\n        .then(value => {\n          // eslint-disable-next-line no-plusplus\n          next(reducer(value[0], value[1], i++))\n        })\n        .catch(reject)\n    }\n\n    next(initVal)\n  })\n\n// Lifted from https://github.com/sindresorhus/p-map-series\n// Thanks @sindresorhus! 🙏\nconst pMapSeries = (iterable, iterator) => {\n  const ret = []\n\n  return pReduce(iterable, (a, b, i) =>\n    Promise.resolve(iterator(b, i)).then(val => {\n      ret.push(val)\n    }),\n  ).then(() => ret)\n}\n\nconst ensureChild = child =>\n  child && typeof child.render === 'function'\n    ? ensureChild(child.render())\n    : child\n\n// Preact puts children directly on element, and React via props\nconst getChildren = element =>\n  element.props && element.props.children\n    ? element.props.children\n    : element.children\n      ? element.children\n      : undefined\n\n// Preact uses \"nodeName\", React uses \"type\"\nconst getType = element => element.type || element.nodeName\n\n// Preact uses \"attributes\", React uses \"props\"\nconst getProps = element => element.props || element.attributes\n\nconst isReactElement = element => !!getType(element)\n\nconst isClassComponent = Comp =>\n  Comp.prototype &&\n  (Comp.prototype.render ||\n    Comp.prototype.isReactComponent ||\n    Comp.prototype.isPureReactComponent)\n\nconst isForwardRef = Comp =>\n  Comp.type && Comp.type.$$typeof === forwardRefSymbol\n\nconst providesChildContext = instance => !!instance.getChildContext\n\n// Recurse a React Element tree, running the provided visitor against each element.\n// If a visitor call returns `false` then we will not recurse into the respective\n// elements children.\nexport default function reactTreeWalker(\n  tree,\n  visitor,\n  context,\n  options = defaultOptions,\n) {\n  return new Promise((resolve, reject) => {\n    const safeVisitor = (...args) => {\n      try {\n        return visitor(...args)\n      } catch (err) {\n        reject(err)\n      }\n      return undefined\n    }\n\n    const recursive = (currentElement, currentContext) => {\n      if (Array.isArray(currentElement)) {\n        return Promise.all(\n          currentElement.map(item => recursive(item, currentContext)),\n        )\n      }\n\n      if (!currentElement) {\n        return Promise.resolve()\n      }\n\n      if (\n        typeof currentElement === 'string' ||\n        typeof currentElement === 'number'\n      ) {\n        // Just visit these, they are leaves so we don't keep traversing.\n        safeVisitor(currentElement, null, currentContext)\n        return Promise.resolve()\n      }\n\n      if (currentElement.type) {\n        if (currentElement.type._context) {\n          // eslint-disable-next-line no-param-reassign\n          currentElement.type._context._currentValue =\n            currentElement.props.value\n        }\n        if (currentElement.type.Provider && currentElement.type.Consumer) {\n          const el = currentElement.props.children(\n            currentElement.type.Provider._context._currentValue,\n          )\n          return recursive(el, currentContext)\n        }\n      }\n\n      if (isReactElement(currentElement)) {\n        return new Promise(innerResolve => {\n          const visitCurrentElement = (\n            render,\n            compInstance,\n            elContext,\n            childContext,\n          ) =>\n            Promise.resolve(\n              safeVisitor(\n                currentElement,\n                compInstance,\n                elContext,\n                childContext,\n              ),\n            )\n              .then(result => {\n                if (result !== false) {\n                  // A false wasn't returned so we will attempt to visit the children\n                  // for the current element.\n                  const tempChildren = render()\n                  const children = ensureChild(tempChildren)\n                  if (children) {\n                    if (Array.isArray(children)) {\n                      // If its a react Children collection we need to breadth-first\n                      // traverse each of them, and pMapSeries allows us to do a\n                      // depth-first traversal that respects Promises. Thanks @sindresorhus!\n                      return pMapSeries(\n                        children,\n                        child =>\n                          child\n                            ? recursive(child, childContext)\n                            : Promise.resolve(),\n                      )\n                        .then(innerResolve, reject)\n                        .catch(reject)\n                    }\n                    // Otherwise we pass the individual child to the next recursion.\n                    return recursive(children, childContext)\n                      .then(innerResolve, reject)\n                      .catch(reject)\n                  }\n                }\n                return undefined\n              })\n              .catch(reject)\n\n          if (\n            typeof getType(currentElement) === 'function' ||\n            isForwardRef(currentElement)\n          ) {\n            const Component = getType(currentElement)\n            const props = Object.assign(\n              {},\n              Component.defaultProps,\n              getProps(currentElement),\n              // For Preact support so that the props get passed into render\n              // function.\n              {\n                children: getChildren(currentElement),\n              },\n            )\n            if (isForwardRef(currentElement)) {\n              visitCurrentElement(\n                () => currentElement.type.render(props),\n                null,\n                currentContext,\n                currentContext,\n              ).then(innerResolve)\n            } else if (isClassComponent(Component)) {\n              // Class component\n              const instance = new Component(props, currentContext)\n\n              // In case the user doesn't pass these to super in the constructor\n              Object.defineProperty(instance, 'props', {\n                value: instance.props || props,\n              })\n              instance.context = instance.context || currentContext\n              // set the instance state to null (not undefined) if not set, to match React behaviour\n              instance.state = instance.state || null\n\n              // Make the setState synchronous.\n              instance.setState = newState => {\n                if (typeof newState === 'function') {\n                  // eslint-disable-next-line no-param-reassign\n                  newState = newState(\n                    instance.state,\n                    instance.props,\n                    instance.context,\n                  )\n                }\n                instance.state = Object.assign({}, instance.state, newState)\n              }\n\n              if (Component.getDerivedStateFromProps) {\n                const result = Component.getDerivedStateFromProps(\n                  instance.props,\n                  instance.state,\n                )\n                if (result !== null) {\n                  instance.state = Object.assign({}, instance.state, result)\n                }\n              } else if (instance.UNSAFE_componentWillMount) {\n                instance.UNSAFE_componentWillMount()\n              } else if (instance.componentWillMount) {\n                instance.componentWillMount()\n              }\n\n              const childContext = providesChildContext(instance)\n                ? Object.assign({}, currentContext, instance.getChildContext())\n                : currentContext\n\n              visitCurrentElement(\n                // Note: preact API also allows props and state to be referenced\n                // as arguments to the render func, so we pass them through\n                // here\n                () => instance.render(instance.props, instance.state),\n                instance,\n                currentContext,\n                childContext,\n              )\n                .then(() => {\n                  if (\n                    options.componentWillUnmount &&\n                    instance.componentWillUnmount\n                  ) {\n                    instance.componentWillUnmount()\n                  }\n                })\n                .then(innerResolve)\n            } else {\n              // Stateless Functional Component\n              visitCurrentElement(\n                () => Component(props, currentContext),\n                null,\n                currentContext,\n                currentContext,\n              ).then(innerResolve)\n            }\n          } else {\n            // A basic element, such as a dom node, string, number etc.\n            visitCurrentElement(\n              () => getChildren(currentElement),\n              null,\n              currentContext,\n              currentContext,\n            ).then(innerResolve)\n          }\n        })\n      }\n\n      // Portals\n      if (\n        currentElement.containerInfo &&\n        currentElement.children &&\n        currentElement.children.props &&\n        Array.isArray(currentElement.children.props.children)\n      ) {\n        return Promise.all(\n          currentElement.children.props.children.map(child =>\n            recursive(child, currentContext),\n          ),\n        )\n      }\n\n      return Promise.resolve()\n    }\n\n    recursive(tree, context).then(resolve, reject)\n  })\n}\n"],"names":["defaultOptions","forwardRefSymbol","Symbol","for","pReduce","iterable","reducer","initVal","Promise","resolve","reject","iterator","i","next","el","done","total","all","value","then","catch","pMapSeries","ret","a","b","push","val","ensureChild","child","render","getChildren","element","props","children","undefined","getType","type","nodeName","getProps","attributes","isReactElement","isClassComponent","Comp","prototype","isReactComponent","isPureReactComponent","isForwardRef","$$typeof","providesChildContext","instance","getChildContext","reactTreeWalker","tree","visitor","context","options","safeVisitor","err","recursive","currentElement","currentContext","Array","isArray","map","item","_context","_currentValue","Provider","Consumer","visitCurrentElement","compInstance","elContext","childContext","result","tempChildren","innerResolve","Component","Object","assign","defaultProps","defineProperty","state","setState","newState","getDerivedStateFromProps","UNSAFE_componentWillMount","componentWillMount","componentWillUnmount","containerInfo"],"mappings":"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"}